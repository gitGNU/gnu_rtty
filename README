rtty V2.0 -- multiuser "tip"/"cu" replacement with logging
Paul Vixie <vixie@pa.dec.com> -- 1-January-1991
$Id: README,v 1.1 1992-01-02 03:06:15 vixie Exp $

Introduction

Rtty is "remote tty" (not radioteletype).  You run a server per port
and then connect to that server from any number of "tip"/"cu"-like
clients.  I wrote it for our console concentrator, but there's no
reason other than performance why you couldn't use it to drive modems,
printers, prom programmers, and so on.

When you connect to the server from more than one client, all clients
will see the same session and all clients can type at and see output
from whatever device is attached to the tty port.  Typing at a device
when someone else is also typing at that device is confusing and more
than a little bit erie.

You will need a BSD-derived UNIX to use this, and you will need "termios"
(the POSIX terminal interface).  (If "man termios" doesn't say something
informative and useful, you are probably hosed.)  Ultrix and SunOS and
AT&T V.4 all have what you need.  AT&T V.3 and non-Tahoe/Reno BSD are
both lacking one thing or another.

Details

The server can be told to keep a log file.  This log file will record
all data in or out of the tty port; that is, data that comes from the
tty port will be logged, and data that is typed at (and therefore sent
to) the tty port from any client will be logged.  There are no special
markers in the log file to tell you which data came from which source;
the data is all just interleaved in the order it was received by the
server.  Note that line terminators in the log file will be "physical"
meaning probably \r\n rather than the normal UNIX \n.  It depends on
the device on the other end of the tty port, but \r\n is pretty common.

We watch our log files with daemons that do roughly what "tail -f" does
except they scan for things like "file table full" or "out of inodes"
or "panic" -- you know, things that computers say when they are unhappy.
None of our scanning software is included in this release of rtty, but
you can write your own.  Note that the protocol used between the server
and client is mostly implemented in a separate module of this source
directory; if you want to connect to the server in real time and scan
the output direcly instead of tailing the log file, that's an option.
(You would most especially want to do it this way if you aren't using
any log files.)

UNIX-domain sockets are the normal way that clients connect to the server.
Both client and server support internet-domain sockets (we'll let you
figure out "how" by reading the sources), there is absolutely no security
in rtty, and opening up our tty ports to the local internet with no access
control has seemed like a bad idea (especially since they are the main
consoles of our Internet gateway computers).

Futures

We need to write some man pages.  An RFC for the protocol would be nice.
Kerberos or at least a "Password:" prompter/checker would make the internet
domain sockets usable, but rsh/xterm presently work so well that ambition
is getting its butt kicked by apathy.  All that said, this may well be the
last version of rtty ever released unless someone else contributes bug fixes
or enhancements.

Installation

These installation instructions assume that you are creating a console
server.  If you are using this code for something else, you should read
all this with several thousand grains of salt.

We put everything in /rtty.  You will probably put it in /usr/local/rtty or
/usr/local/adm/rtty or /usr/local/lib/rtty.  Once you decide where you want
this stuff, edit the Makefile and change DESTPATH.  (Probably you should not
change DESTROOT; it's a knob for "make install" when the compilation server
and the execution server have different paths to the tree.)  Assuming that
you put it in /rtty, you will need the following subdirectories:

    /rtty/bin
	will contain the server, client, and some shell scripts to
	glue it all together and make it work.  "make install" will
	populate it but you will need to create it.
    /rtty/dev
	will contain symlinks to entries in /dev.  the names of the
	symlinks should be meaningful, and the names in /dev probably
	will not be meaningful.  you might use
		ln -s /dev/tty15 /rtty/dev/decwrl
	and so on.
    /rtty/log
	will contain the log files, if you use them.  just create it,
	the servers will populate it.
    /rtty/pid
	will contain server pid's, which are used by the various shell
	scripts that kill or restart the servers or age the log files.
	just create it and the servers will populate it.
    /rtty/sock
	will contain the UNIX-domain sockets for the various servers.
	just create it and the servers will populate it.

So OK, you've chosen a DESTPATH, created and populated it, and edited
the Makefile.  Type "make" and if all goes well, type "make install" and
"make clean".

Make sure you've got /rtty/dev full of all the relevant symlinks into
/dev before you continue.

Edit root's crontab to include a line like this one:
	10 4 * * * sh /rtty/bin/agelogs

Edit rc.local or rc.localhost or whatever to include a line like this one:
	/rtty/bin/Startup
Then run that command by hand or reboot your computer.

Make a symlink from some common executables directory so that the "console"
command is in most people's $PATH.  We did this:
	ln -s /rtty/bin/console /usr/local/bin/console

That's all.  Type "rehash" and type "console".  You should get a list of
the available consoles.  Pick one (say, "decwrl" if you have one) and try
something like "console decwrl".  If it works, bring up another window and
do it again.  You should see the same session in both windows.  Bring up
yet another window and say something like "tail -f /rtty/log/decwrl".  You
should see the session in that window, too.

Other Notes

Since there's no documentation, there's no harm in telling you that the
"console" script just runs "rtty" with some obscure arguments to grease
its skids.  While in "rtty", a "~" after a carriage return (\r or 0x0D)
is magic; "~?" will explain the magic to you somewhat tersely.  The source
code will explain it in more detail.

Have fun.  Drop me a note if you find this useful.  Definitely drop me
a note if you find a bug or add a feature.

Paul Vixie <vixie@pa.dec.com>
